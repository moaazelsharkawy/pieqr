import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Script from 'next/script'
import { useState,useEffect, useRef } from 'react'
import { AwesomeQRCode } from "@awesomeqr/react";
import { ImageAsDataURI } from '../component/tool'
import Modal from 'react-bootstrap/Modal';
import Toast from 'react-bootstrap/Toast';
import ToastContainer from 'react-bootstrap/ToastContainer';


export default function Home() {

  const [piready,setpistatus] = useState(false)
  const [piauth,setpiauth] = useState(null)
  const [publickey,setpublickey] = useState("")
  const [amount,setamount] = useState(0)
  const [payurl,setpayurl] = useState("pi://pieqr.vercel.app")
  const [backgroundImage, setBackgroundImage] = useState()
  const qrcoderef = useRef()
  const scopes = ['username', 'payments'];
  const [show, setShow] = useState(false);
  const [wrong, setwrong] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [incomplete,setincomplete] = useState(null);

  useEffect(() => {
    (async () => setBackgroundImage(await ImageAsDataURI("/logo.png")))();
  });
  useEffect(()=>{
    if(incomplete!=null && piauth!=null){
      fetch(
        process.env.NEXT_PUBLIC_BASE_URL +'api/incomplete',{
          method: 'POST',
          headers:{
            'Authorization': piauth.accessToken
          },
          body: JSON.stringify({pid: incomplete.identifier,txid:incomplete.transaction.txid})
        }
      )
    }
  },[piauth,incomplete])
  const saveqr = ()=>{
    if(/^G[A-Z0-9]{55}$/.test(publickey)){
      if(Number.isInteger(amount)){
        setpayurl("pi://pieqr.vercel.app/"+publickey+"/"+amount)
        setShow(true);
      }
      else{
        setwrong(true)
        setpayurl("pi://pieqr.vercel.app")
      }
    }else{
      setwrong(true)
      setpayurl("pi://pieqr.vercel.app")
    }
    
  }
  function onIncompletePaymentFound(payment) {
    setincomplete(payment)
  };
  
  function PiInit(){
    switch (process.env.NEXT_PUBLIC_MODE){
      case 'sandbox':
        Pi.init({ version:'2.0',sandbox:true})
        setpistatus(true)
        break;
      case 'product':
        Pi.init({ version:'2.0',sandbox:false})
        setpistatus(true)
        break;
    }

  }

  useEffect(()=>{
    try {
      if(piready){
        const user = Pi.authenticate(scopes, onIncompletePaymentFound).then(function(auth){
          setpiauth(auth)          
      }).catch((error)=>{
        alert(error)
      })
      }      
      
    } catch (err) {
      alert(err)
        console.log(err)
    }
  },[piready])

  function handleClick(){
    try{
      Pi.createPayment({
        // Amount of Ï€ to be paid:
        amount: 1,
        // An explanation of the payment - will be shown to the user:
        memo: "Donation for Developer", // e.g: "Digital kitten #1234",
        // An arbitrary developer-provided metadata object - for your own usage:
        metadata: { type:0 }, // e.g: { kittenId: 1234 }
      }, {
        // Callbacks you need to implement - read more about those in the detailed docs linked below:
        onReadyForServerApproval: function(paymentId) { 
          fetch(
            process.env.NEXT_PUBLIC_BASE_URL + 'api/approval',{
              method: 'POST',
              headers:{
                'Authorization': piauth.accessToken
              },
              body: JSON.stringify({pid: paymentId})
            }
          )
         },
        onReadyForServerCompletion: function(paymentId, txid) {
          fetch(
            process.env.NEXT_PUBLIC_BASE_URL +'api/complete',{
              method: 'POST',
              headers:{
                'Authorization': piauth.accessToken
              },
              body: JSON.stringify({pid: paymentId,txid:txid})
            }
          )
        },
        onCancel: function(paymentId) { /* ... */ },
        onError: function(error, payment) { /* ... */ },
      });
    }
    catch(e){
      setShowToast(true)
    }
    

  }

  const handlepublickey = event =>{
    setpublickey(event.target.value)
  }

  const handleamount = event =>{
    setamount(parseInt(event.target.value*10000000))
  }
  
  return (
    
    <div className={styles.container}>
      <Head>
        <title>pieQr</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Script src='https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3524983749365405' crossOrigin="anonymous"/>
      <Script src="https://sdk.minepi.com/pi-sdk.js" onReady={PiInit}/>
      <main className={styles.main}>
        <h1 className={styles.title+' select-none'}>
          pieQr
        </h1>
        
        <p className={styles.description+' select-none'}>
Safe payments
  </p>        <form className="group relative w-full mb-5" >
          <input onChange={handlepublickey}
          className="focus:ring-2 focus:ring-blue-500 focus:outline-none appearance-none w-full text-sm leading-6 text-slate-900 placeholder-slate-400 rounded-md py-2 text-center ring-1 ring-slate-200 shadow-sm" type="text" aria-label="Public Key" placeholder="Receiver Public Key">
          </input>
          <input onInput={handleamount}
          className="mt-4 focus:ring-2 focus:ring-blue-500 focus:outline-none appearance-none w-full text-sm leading-6 text-slate-900 placeholder-slate-400 rounded-md py-2 text-center ring-1 ring-slate-200 shadow-sm" type="number" aria-label="Amount" placeholder="Amount">
          </input>
        </form>   
        
        <p className='text-danger' >{wrong && 'PublicKey or Amount is wrong'}</p>
        
        <Modal show={show} fullscreen={true}>
        <Modal.Body className={styles.qrbg+' flex justify-center h-100 items-center'} >
        
        <button onClick={()=>{setShow(false)}} type="button" className="btn-close fixed top-0 mt-3 text-white right-0 mr-3" aria-label="Close"></button>
        
        <div className='block'>
          <h1 className='text-center font-mono font-bold'>- Receiver -</h1>
          <p className='break-all text-center text-gray-500'>{publickey}</p>
          <h1 className='text-center font-mono font-bold'>- Amount -</h1>
          <p className='break-all text-center text-gray-500'>{(parseFloat(amount)*0.0000001).toFixed(7) + ' Pi'}</p>
          <h3 className='text-center font-mono font-bold'>- Fee -</h3>
          <p className='break-all text-center text-gray-500'>0.02 Pi</p>
          <div className={styles.qrborder+' m-auto max-h-72 border rounded-xl overflow-hidden'} ref={qrcoderef}>
            <AwesomeQRCode 
            options={{
              text: payurl,
              logoImage:backgroundImage,
              colorDark:'#fcb44b'
              
            }}          
            />
          </div>
        </div>

        
        </Modal.Body>
        </Modal>
        <button fullscreen="true" className="h-10 px-6 w-full font-semibold rounded-md bg-black text-white" onClick={saveqr}>
          Generate
        </button>
      <p className='pt-3 select-none'>Take a screenshot to use QRcode</p>
      <p className='select-none'>System need receive one more fee</p>
      <p className='text-center select-none'>Ex: Amount set 0.1 ,Sender will cost 0.1+base fee * 2</p>
      
      <button onClick={handleClick} className="flex-none flex items-center justify-center w-40 h-9 rounded-md text-slate-300 border border-slate-200">
        <svg width="20" height="20" fill="orangered" aria-hidden="true">
          <path d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" />
        </svg>
        <span className=' text-orange-600'>Donate 1 Pi</span>
      </button>
      
      <ToastContainer position='bottom-center' className='pb-4'>
        <Toast onClose={() => setShowToast(false)} show={showToast} delay={2000} autohide>
          <Toast.Header closeButton={false}>
            <strong className="me-auto text-orange-600">Sorry</strong>
          </Toast.Header>
          <Toast.Body>Donation feature only support in PiBrowser</Toast.Body>
        </Toast>
      </ToastContainer>
      </main>
     
    </div>
  )
}
